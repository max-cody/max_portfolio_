#import relevant modules
import  oandapyV20
import oandapyV20.endpoints.instruments as instruments
import numpy as np
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
import time
from oandapyV20.endpoints.orders import OrderCreate
account_id = '101-004-25992647-002'
access_token = '5f41287d914c15258c4da673a9be30a3-f96bef8d81aeea2c529ee62a7f769a98'
oanda_client = oandapyV20.API(access_token=access_token)

#global variables

input_size = 5 #number of features in each candle
hidden_units = 100 # number of neurons in each layer
output_size = 2 # number of output neurons representing buy/sell
slippage = 0.05



#function to make the trade order
def execute_trade(prediction, current_price,slippage):

    try:
        instrument = 'EUR/USD'
        units = 1000 #number of units traded
        stop_loss = 0.005
        take_profit = 0.01


        #calc slippage
        if prediction == 'Buy':
          slippage_price = float(current_price) + slippage
        else:
           slippage_price = float(current_price) - slippage

        if prediction == 'Buy':
            order_type = 'BUY'
        else:
            order_type = 'SELL'

        data = {
            'order': {
                'type': 'MARKET',
                'instrument': instrument,
                'units': str(units),
                'positionFill': 'DEFAULT',
                'stopLossOnFill': {
                    'price': str(stop_loss)
                },
                'takeprofitOnFill': {
                    'price': str(take_profit)
                }
            }
        }
        r = OrderCreate(accountID=account_id, data=data)
        response = oanda_client.request(r)

        if 'orderFillTransaction' in response:
            print("Trade executed successfully:", response['orderFillTransaction']['id'])
            print("Executed price:", str(slippage_price))
        else:
            print("Trade execution failed:", response['orderRejectTransaction']['rejectReason'])
    except Exception as e:
        print("An error occurred while executing trade:", e)

def Run_trading_bot():
    try:
         instrument = 'EUR_USD'  # Choose your desired instrument
         granularity = 'H1'  # Choose the desired timeframe
         candles_count = 100  # Number of candles to retrieve for training

        # Retrieve historical candle data from OANDA
         params = {
            'count': candles_count,
            'granularity': granularity,
        }
         r = instruments.InstrumentsCandles(instrument=instrument, params=params)
        
         response = oanda_client.request(r)
         candles = response['candles']
          # Data preprocessing and feature extraction
         data = np.zeros((candles_count, input_size))
         for i in range(candles_count):
            data[i, 0] = candles[i]['mid']['o']
            data[i, 1] = candles[i]['mid']['h']
            data[i, 2] = candles[i]['mid']['l']
            data[i, 3] = candles[i]['mid']['c']

        # Normalize the data
         data = data / np.max(data)

        # Generate target labels (buy/sell)
         labels = np.zeros((candles_count, output_size))
         for i in range(candles_count - 1):
            if data[i + 1, 3] > data[i, 3]:
                labels[i, 0] = 1  # Buy
            else:
                labels[i, 1] = 1  # Sell

        # Split the data into training and testing sets
         split_ratio = 0.8
         train_samples = int(candles_count * split_ratio)
         x_train = data[:train_samples]
         y_train = labels[:train_samples]
         x_test = data[train_samples:]
         y_test = labels[train_samples:]

        # Define the neural network model
         model = Sequential()
         model.add(Dense(hidden_units, activation='relu', input_shape=(input_size,)))
         model.add(Dense(output_size, activation='softmax'))
         model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

        # Train the model
         model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))

        # Use the model for prediction
         predictions = model.predict(x_test)

        # Perform actions based on the predictions
         for i in range(len(predictions)):
            if predictions[i, 0] > predictions[i, 1]:
                print("Prediction: Buy")
                execute_trade('Buy', candles[i]['mid']['c'], slippage)
            else:
                print("Prediction: Sell")
                execute_trade('Sell', candles[i]['mid']['c'], slippage)

         print("Trading bot ran successfully at", time.ctime())
    except Exception as e:
        print("An error occurred while running the trading bot:", e)

# Run the trading bot every minute

while True:
    Run_trading_bot()
    time.sleep(10 * 3 * 24)


    #while True:
    #Run_trading_bot()
   # time.sleep(10 * 3 * 24)
        
        


    
